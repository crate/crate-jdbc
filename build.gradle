apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

group = "io.crate"

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/groups/public"
    }
    jcenter()
}

dependencies {
    compile 'io.crate:crate-client:0.38.0-SNAPSHOT'

    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'junit:junit:4.11'
    testCompile ('com.carrotsearch.randomizedtesting:randomizedtesting-runner:2.1.1') {
        exclude group: 'junit', module: 'junit'
    }
    testCompile ("org.mockito:mockito-core:1.9.5") {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            include "io/crate/client/jdbc/*"
            include "io/crate/client/jdbc/types/**"
        }
    }
    test {
        resources {
            srcDir 'src/test/java'
        }
    }
}

ext {
    downloadDir = new File(rootDir, 'downloads')
    crate_version = '0.38.0'
}


def download (String url, String name){
    downloadDir.mkdirs()
    def dest = new File(downloadDir, name)
    ant.get(
            src: url,
            verbose: true,
            usetimestamp: true,
            skipexisting: true,
            dest: dest
    )
    return dest;
}

def extractTopfolder(File src, String trg){
    copy {
        includeEmptyDirs = false
        FileTree ft
        if(src.name.endsWith('.zip')) {
            ft = zipTree(src)
        }
        if(src.name.endsWith('.tar.gz')) {
            ft = tarTree(src)
        }
        from(ft) {
            eachFile { details ->
                details.path =
                        details.path.substring(details.relativePath.segments[0].length())
            }
        }
        into trg
    }
}

task downloadCrateRelease << {
    def dest = download(
            "https://cdn.crate.io/downloads/releases/crate-${crate_version}.tar.gz",
            "crate-${crate_version}.tar.gz")
    extractTopfolder(dest, 'parts/crate')
}

task getVersion ( dependsOn: 'classes') << {
    def stdout = new ByteArrayOutputStream()
    javaexec {
        classpath = sourceSets.main.runtimeClasspath
        main = 'io.crate.client.jdbc.CrateDriverVersion'
        standardOutput = stdout
    }
    ext.gitTag = "git describe".execute().in.text.trim()
    ext.version = stdout.toString().trim().split(" ")[1].replace(',','').trim()

    if (!gradle.taskGraph.hasTask(uploadArchives)) {
        ext.version = version + "-" + "git rev-parse --short HEAD".execute().in.text.trim()
    }
    project.version = version

    logger.quiet("gitTag: " + gitTag)
    logger.quiet("version: " + version)
}

jar.dependsOn getVersion
jar {
    baseName 'crate-jdbc'
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it).matching{
        exclude 'META-INF/**'
    }}

    doLast {
        manifest {
            attributes("Implementation-Title": "Crate Data JDBC Driver", "Implementation-Version": project.version)
        }
    }
}

task myJavadocs(type: Javadoc, dependsOn: processResources) {
    classpath = configurations.compile
    source = sourceSets.main.allJava
}

task javadocJar (type: Jar, dependsOn: [myJavadocs]) {
    classifier = 'javadoc'
    from myJavadocs.destinationDir
    manifest {
        attributes("Implementation-Title": "Crate Data JDBC Driver")
    }
}

task buildJavadocJar (dependsOn: [getVersion, myJavadocs] ) << {
    ext.version = getVersion.version
    project.version = ext.version
    tasks.javadocJar.execute()
}

task sourceJar (type : Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest {
        attributes("Implementation-Title": "Crate Data JDBC Driver")
    }
}

task buildSourceJar (dependsOn: [getVersion] ) << {
    ext.version = getVersion.version
    project.version = ext.version
    tasks.sourceJar.execute()
}

artifacts {
    archives jar
    archives javadocJar
    archives sourceJar
}

task signJars (type : Sign, dependsOn: [jar, buildJavadocJar, buildSourceJar]) {
    sign configurations.archives
}


install.dependsOn([jar, buildJavadocJar, buildSourceJar])
install {
    repositories {
        mavenInstaller {
            pom.whenConfigured {
                it.dependencies.clear()
            }
        }
    }
}

project.ext.bintrayUsername = project.hasProperty('bintrayUsername') ? bintrayUsername : ""
project.ext.bintrayPassword = project.hasProperty('bintrayPassword') ? bintrayPassword : ""

uploadArchives.dependsOn([signJars])
uploadArchives {
    repositories{
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
                if (project.ext.sonatypeUsername.length() == 0 || project.ext.sonatypePassword.length() == 0) {
                    throw new StopExecutionException("uploadArchives cannot be called without bintray username and password")
                }
            }
            pom.whenConfigured {
                it.dependencies.clear()
            }
            pom.project {
                artifactId 'crate-jdbc'
                name 'crate-jdbc'
                description 'Crate Data JDBC Driver'
                url 'https://crate.io'
                scm {
                    url 'https://github.com/crate/crate-jdbc'
                    connection 'scm:git:git://github.com/crate/crate-jdbc.git'
                    developerConnection 'scm:git:ssh:git@github.com:crate/crate-jdbc.git'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/license/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'crate'
                        name 'Crate Developers'
                        email 'office@crate.io'
                    }
                }
            }

            repository(id: 'crate-jdbc', url: 'https://api.bintray.com/maven/crate/crate/crate-jdbc') {
                authentication(userName: project.ext.bintrayUsername, password: project.ext.bintrayPassword)
            }
        }
    }
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    dependsOn downloadCrateRelease
}

idea {
    project {
        languageLevel = 'JDK_1_7'

        ipr {
            withXml { provider ->
                def node = provider.asNode()
                def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
                copyrightManager.@default = "CrateASL2"
                def aslCopyright = copyrightManager.copyright.find { it.option.find { it.@name == "myName" }?.@value == "CrateASL2" }
                if (aslCopyright == null) {
                    copyrightManager.append(new XmlParser().parse(file("copyright.xml")))
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}
