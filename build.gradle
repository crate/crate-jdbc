plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
    id "maven-publish"
    id "signing"
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

allprojects {
    apply plugin: 'idea'
    apply plugin: "java-library"
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
}

group = "io.crate"

dependencies {
    implementation project(':pg')
    testImplementation 'io.crate:crate-testing:0.9.1'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'junit:junit:4.12'
    testImplementation ('com.carrotsearch.randomizedtesting:randomizedtesting-runner:2.7.1') {
        exclude group: 'junit', module: 'junit'
    }
    testImplementation ("org.mockito:mockito-core:2.23.4") {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

sourceSets {
    main {
        java {
            srcDir 'driver/main/java'
        }
        resources {
            srcDir 'driver/main/resources'
        }
    }
    test {
        java {
            srcDir 'driver/test/java'
        }
    }
}

task getVersion(dependsOn: [compileJava]) {
    doFirst {
        def stdout = new ByteArrayOutputStream()
        javaexec {
            classpath = sourceSets.main.runtimeClasspath
            main = 'io.crate.client.jdbc.CrateDriverVersion'
            standardOutput = stdout
        }
        ext.gitTag = "git describe".execute().in.text.trim()
        ext.version = stdout.toString().trim().split(" ")[1].replace(',','').trim()

        if (!gradle.taskGraph.hasTask(publishToSonatype)) {
            ext.version = version + "-" + "git rev-parse --short HEAD".execute().in.text.trim()
        }
        project.version = version

        logger.quiet("gitTag: " + gitTag)
        logger.quiet("version: " + version)
    }
}

shadowJar.dependsOn([getVersion])
shadowJar {
    archiveClassifier.set('')
    duplicatesStrategy 'fail'
    configurations = [project.configurations.compileClasspath]
    dependencies {
        include(project(':pg'))
    }
    doFirst {
        from sourceSets.main.output
        manifest {
            attributes("Implementation-Title": "CrateDB JDBC Driver", "Implementation-Version": project.version)
        }
    }

    relocate 'org.postgresql', 'io.crate.shade.org.postgresql'
}

jar.dependsOn(dependsOn: [shadowJar])
jar {
    actions = [] // Do nothing, build shadowJar instead
}

task standaloneJar(type: ShadowJar, dependsOn: [getVersion]) {
    archiveBaseName.set('crate-jdbc-standalone')
    archiveClassifier.set('')
    duplicatesStrategy 'fail'
    configurations = [project.configurations.compileClasspath]
    doFirst {
        from sourceSets.main.output
        manifest {
            attributes("Implementation-Title": "CrateDB JDBC Driver (Standalone)", "Implementation-Version": project.version)
        }
    }
    // Crate JDBC dependencies
    relocate 'com.fasterxml.jackson', 'io.crate.shade.com.fasterxml.jackson'
    relocate 'org.postgresql', 'io.crate.shade.org.postgresql'
    // PGJDBC dependencies
    relocate 'waffle', 'io.crate.shade.waffle'
    relocate 'com.sun.jna', 'io.crate.shade.com.sun.jna'
    relocate 'org.slf4j', 'io.crate.shade.org.slf4j'
    relocate 'org.apache', 'io.crate.shade.org.apache'
    relocate 'org.osgi', 'io.crate.shade.org.osgi'
    relocate 'com.google', 'io.crate.shade.com.google'
    relocate 'com.ongres', 'io.crate.shade.com.ongres'
}

task javadocJar(type: Jar, dependsOn: [getVersion, javadoc]) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
    doFirst {
        manifest {
            attributes("Implementation-Title": "CrateDB JDBC Driver", "Implementation-Version": project.version)
        }
    }
}

task javadocJarStandalone (type: Jar, dependsOn: [getVersion, javadoc]) {
    archiveBaseName.set('crate-jdbc-standalone')
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
    doFirst {
        manifest {
            attributes("Implementation-Title": "CrateDB JDBC Driver (Standalone)", "Implementation-Version": project.version)
        }
    }
}

task sourcesJar (type : Jar, dependsOn: [getVersion]) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    doFirst {
        manifest {
            attributes("Implementation-Title": "CrateDB JDBC Driver", "Implementation-Version": project.version)
        }
    }
}

task sourcesJarStandalone (type : Jar, dependsOn: [getVersion]) {
    archiveBaseName.set('crate-jdbc-standalone')
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    doFirst {
        manifest {
            attributes("Implementation-Title": "CrateDB JDBC Driver (Standalone)", "Implementation-Version": project.version)
        }
    }
}


artifacts {
    archives shadowJar
    archives standaloneJar
    archives javadocJar
    archives javadocJarStandalone
    archives sourcesJar
    archives sourcesJarStandalone
}


project.ext.sonatypeUsername = project.hasProperty('sonatypeUsername') ? sonatypeUsername : ""
project.ext.sonatypePassword = project.hasProperty('sonatypePassword') ? sonatypePassword : ""
project.ext.url = 'https://crate.io'
project.ext.scm = {
    url = 'https://github.com/crate/crate-jdbc'
    connection = 'scm:git:git://github.com/crate/crate-jdbc.git'
    developerConnection = 'scm:git:ssh:git@github.com:crate/crate-jdbc.git'
}
project.ext.licenses = {
    license {
        name = 'The Apache Software License, Version 2.0'
        url = 'http://www.apache.org/license/LICENSE-2.0.txt'
        distribution = 'repo'
    }
}
project.ext.developers = {
    developer {
        id = 'crate'
        name = 'Crate Developers'
        email = 'office@crate.io'
    }
}

publishing {
    publications {
        jdbc(MavenPublication) {
            artifactId = 'crate-jdbc'
            artifact shadowJar
            artifact sourcesJar
            artifact javadocJar
            version = project.version
            pom {
                name = "crate-jdbc"
                description = "CrateDB JDBC Driver"
                url = project.ext.url
                licenses project.ext.licenses
                developers project.ext.developers
                scm project.ext.scm
            }
        }
        jdbcStandalone(MavenPublication) {
            artifactId = 'crate-jdbc-standalone'
            artifact standaloneJar
            artifact javadocJarStandalone
            artifact sourcesJarStandalone
            version = project.version
            pom {
                name = "crate-jdbc-standalone"
                description = "CrateDB JDBC Driver (Standalone)"
                url = project.ext.url
                licenses project.ext.licenses
                developers project.ext.developers
                scm project.ext.scm
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign(publishing.publications)
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
    outputs.upToDateWhen { false }
}

idea {
    project {
        vcs = 'Git';
        languageLevel = 'JDK_1_8';
        ipr {
            withXml { provider ->
                def node = provider.asNode();
                node.append(new XmlParser().parse(file("codeStyle.xml")));
                def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
                copyrightManager.@default = "CrateASL2";
                def aslCopyright = copyrightManager.copyright.find { it.option.find { it.@name == "myName" }?.@value == "CrateASL2" }
                if (aslCopyright == null) {
                    copyrightManager.append(new XmlParser().parse(file("copyright.xml")))
                }
            }
        }
    }
}

wrapper {
    gradleVersion = '5.0'
}
