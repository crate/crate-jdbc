
buildscript {
    repositories {
        mavenCentral()
        // Note that this is still required, until the various dependencies we use migrate over to maven central.
        // jcenter is going to be available until February 2022.
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.3'
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0'
    }
}

import org.gradle.api.internal.artifacts.publish.DefaultPublishArtifact
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

group = "io.crate"

apply plugin: 'io.codearte.nexus-staging'

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'

    repositories {
        mavenCentral()
        jcenter()
    }

    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
}

dependencies {
    compile project(':pg')
    testCompile 'io.crate:crate-testing:0.9.1'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'junit:junit:4.12'
    testCompile ('com.carrotsearch.randomizedtesting:randomizedtesting-runner:2.7.1') {
        exclude group: 'junit', module: 'junit'
    }
    testCompile ("org.mockito:mockito-core:2.23.4") {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
}

sourceSets {
    main {
        java {
            srcDir 'driver/main/java'
        }
        resources {
            srcDir 'driver/main/resources'
        }
    }
    test {
        java {
            srcDir 'driver/test/java'
        }
    }
}

task getVersion(dependsOn: [classes]) {
    doLast {
        def stdout = new ByteArrayOutputStream()
        javaexec {
            classpath = sourceSets.main.runtimeClasspath
            main = 'io.crate.client.jdbc.CrateDriverVersion'
            standardOutput = stdout
        }
        ext.gitTag = "git describe".execute().in.text.trim()
        ext.version = stdout.toString().trim().split(" ")[1].replace(',','').trim()

        if (!gradle.taskGraph.hasTask(uploadArchives)) {
            ext.version = version + "-" + "git rev-parse --short HEAD".execute().in.text.trim()
        }
        project.version = version

        logger.quiet("gitTag: " + gitTag)
        logger.quiet("version: " + version)
    }
}

task shadedJar(type: ShadowJar, dependsOn: [getVersion]) {
    baseName 'crate-jdbc'
    classifier ''
    duplicatesStrategy 'fail'
    configurations = [project.configurations.compile]
    dependencies {
        include(project(':pg'))
    }
    doFirst {
        from sourceSets.main.output
    }
    doLast {
        manifest {
            attributes("Implementation-Title": "Crate.IO JDBC Driver", "Implementation-Version": project.version)
        }
    }
    relocate 'org.postgresql', 'io.crate.shade.org.postgresql'
}

jar.dependsOn(dependsOn: [shadedJar])
jar {
    baseName 'crate-jdbc'
    actions = [] // Do nothing, build shadedJar instead
}

task standaloneJar(type: ShadowJar, dependsOn: [getVersion]) {
    baseName 'crate-jdbc-standalone'
    classifier ''
    duplicatesStrategy 'fail'
    configurations = [project.configurations.compile]
    doFirst {
        from sourceSets.main.output
    }
    doLast {
        manifest {
            attributes("Implementation-Title": "Crate.IO JDBC Driver (Standalone)", "Implementation-Version": project.version)
        }
    }
    // Crate JDBC dependencies
    relocate 'com.fasterxml.jackson', 'io.crate.shade.com.fasterxml.jackson'
    relocate 'org.postgresql', 'io.crate.shade.org.postgresql'
    // PGJDBC dependencies
    relocate 'waffle', 'io.crate.shade.waffle'
    relocate 'com.sun.jna', 'io.crate.shade.com.sun.jna'
    relocate 'org.slf4j', 'io.crate.shade.org.slf4j'
    relocate 'org.apache', 'io.crate.shade.org.apache'
    relocate 'org.osgi', 'io.crate.shade.org.osgi'
    relocate 'com.google', 'io.crate.shade.com.google'
    relocate 'com.ongres', 'io.crate.shade.com.ongres'
}


task myJavadocs(type: Javadoc, dependsOn: processResources) {
    classpath = configurations.compile
    source = sourceSets.main.allJava
}

task javadocJar (type: Jar, dependsOn: [getVersion, myJavadocs]) {
    baseName 'crate-jdbc'
    classifier = 'javadoc'
    from myJavadocs.destinationDir
    doLast {
        manifest {
            attributes("Implementation-Title": "Crate.IO JDBC Driver", "Implementation-Version": project.version)
        }
    }
}

task javadocJarStandalone (type: Jar, dependsOn: [getVersion, myJavadocs]) {
    baseName 'crate-jdbc-standalone'
    classifier = 'javadoc'
    from myJavadocs.destinationDir
    doLast {
        manifest {
            attributes("Implementation-Title": "Crate.IO JDBC Driver (Standalone)", "Implementation-Version": project.version)
        }
    }
}


task sourceJar (type : Jar, dependsOn: [getVersion]) {
    baseName 'crate-jdbc'
    classifier = 'sources'
    from sourceSets.main.allSource
    doLast {
        manifest {
            attributes("Implementation-Title": "Crate.IO JDBC Driver", "Implementation-Version": project.version)
        }
    }
}

task sourceJarStandalone (type : Jar, dependsOn: [getVersion]) {
    baseName 'crate-jdbc-standalone'
    classifier = 'sources'
    from sourceSets.main.allSource
    doLast {
        manifest {
            attributes("Implementation-Title": "Crate.IO JDBC Driver (Standalone)", "Implementation-Version": project.version)
        }
    }
}


artifacts {
    archives shadedJar
    archives standaloneJar
    archives javadocJar
    archives javadocJarStandalone
    archives sourceJar
    archives sourceJarStandalone
}

task signJars (type : Sign, dependsOn: [shadedJar, standaloneJar, javadocJar, javadocJarStandalone, sourceJar, sourceJarStandalone]) {
    sign configurations.archives
}

install.dependsOn([shadedJar, standaloneJar, javadocJar, javadocJarStandalone, sourceJar, sourceJarStandalone])
install {
    repositories {
        mavenInstaller {
            addFilter('crate-jdbc') {artifact, file ->
                artifact.name == 'crate-jdbc'
            }
            addFilter('crate-jdbc-standalone') {artifact, file ->
                artifact.name == 'crate-jdbc-standalone'
            }
            pom('crate-jdbc-standalone').whenConfigured {
                it.dependencies.clear()
            }
        }
    }
}

project.ext.sonatypeUsername = project.hasProperty('sonatypeUsername') ? sonatypeUsername : ""
project.ext.sonatypePassword = project.hasProperty('sonatypePassword') ? sonatypePassword : ""
project.ext.url = 'https://crate.io'
project.ext.scm = {
    url 'https://github.com/crate/crate-jdbc'
    connection 'scm:git:git://github.com/crate/crate-jdbc.git'
    developerConnection 'scm:git:ssh:git@github.com:crate/crate-jdbc.git'
}
project.ext.licenses = {
    license {
        name 'The Apache Software License, Version 2.0'
        url 'http://www.apache.org/license/LICENSE-2.0.txt'
        distribution 'repo'
    }
}
project.ext.developers = {
    developer {
        id 'crate'
        name 'Crate Developers'
        email 'office@crate.io'
    }
}

uploadArchives.dependsOn([signJars])
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
                if (project.ext.sonatypeUsername.length() == 0 || project.ext.sonatypePassword.length() == 0) {
                    throw new StopExecutionException("uploadArchives cannot be called without maven username and password")
                }
                // This is a (very) un-pretty way of attaching the asc files as artifacts to the deployment.
                // The mavenDeployer is pretty old, not documented very well - and does not pick up .asc files.
                // Here we're slightly abusing the system and creating "fake" .asc artifacts for each .jar file,
                // because we know for certain that if we got there, the asc files must exist.
                // If we don't do this, Sonatype will not allow promotion to maven central.
                artifacts.each { ca ->
                    if (ca.file.path.endsWith('jar')) {
                        def ascfile = file(ca.file.path + '.asc')
                        deployment.addArtifact(new DefaultPublishArtifact(ca.name, "jar.asc", "jar.asc", ca.classifier, null, ascfile))
                    }
                }
            }

            MavenPom pomJdbc = addFilter('crate-jdbc') {artifact, file ->
                artifact.name == 'crate-jdbc'
            }

            pomJdbc.whenConfigured { pom ->
                pom.dependencies.clear()
                subprojects.findAll().each {
                    if (it.hasProperty('install')) {
                        pom.dependencies.addAll(
                            it.install.repositories.mavenInstaller.pom.getEffectivePom().dependencies.findAll()
                        )
                    }
                }
            }

            pomJdbc.project {
                artifactId 'crate-jdbc'
                name 'crate-jdbc'
                description 'Crate.IO JDBC Driver'
                url project.ext.url
                scm project.ext.scm
                licenses project.ext.licenses
                developers project.ext.developers
            }

            MavenPom ascPom = addFilter('asc') {artifact, file -> artifact.ext == "asc" }
            ascPom.artifactId = 'crate-jdbc'
            ascPom.groupId = project.group

            MavenPom pomJdbcStandalone = addFilter('crate-jdbc-standalone') {artifact, file ->
                artifact.name == 'crate-jdbc-standalone'
            }
            pomJdbcStandalone.whenConfigured {
                it.dependencies.clear()
            }
            pomJdbcStandalone.project {
                artifactId 'crate-jdbc-standalone'
                name 'crate-jdbc-standalone'
                description 'Crate.IO JDBC Driver (Standalone)'
                url project.ext.url
                scm project.ext.scm
                licenses project.ext.licenses
                developers project.ext.developers
            }

            repository(id: 'crate-jdbc', url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                authentication(userName: project.ext.sonatypeUsername, password: project.ext.sonatypePassword)
            }
        }
    }
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
    outputs.upToDateWhen { false }
}

idea {
    project {
        vcs = 'Git';
        languageLevel = 'JDK_1_8';
        ipr {
            withXml { provider ->
                def node = provider.asNode();
                node.append(new XmlParser().parse(file("codeStyle.xml")));
                def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
                copyrightManager.@default = "CrateASL2";
                def aslCopyright = copyrightManager.copyright.find { it.option.find { it.@name == "myName" }?.@value == "CrateASL2" }
                if (aslCopyright == null) {
                    copyrightManager.append(new XmlParser().parse(file("copyright.xml")))
                }
            }
        }
    }
}

wrapper {
    gradleVersion = '5.0'
}
