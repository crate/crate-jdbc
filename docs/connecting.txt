.. _jdbc_connecting_to_crate:

=====================
Connecting to CrateDB
=====================

CrateDB >= 2.1 requires to connect using a valid database user. If you're using
the standard edition of CrateDB, you can only use the predefined ``crate``
user. If you're using the enterprise edition, see `User Management`_ on
information how to add and remove users.

In JDBC, the database user can be passed via the ``user`` key JDBC URL or
:ref:`jdbc_connection_properties`.

.. rubric:: Table of Contents

.. contents::
   :local:

JDBC Driver Class
=================

A connection can be established using ``DriverManager.getConnection()``
method, e.g.::

    Connection conn = DriverManager.getConnection("crate://localhost:5432/");

The driver class is ``io.crate.client.jdbc.CrateDriver``.

JDBC URL Format
===============

With JDBC, a database is represented by a URL (Uniform Resource Locator).
With CrateDB, this takes the following form::

    [jdbc:]crate://<host>:<psql-port>[,<host>:<psql-port> , ...]/
        [?propertyName1=propertyValue1[&propertyName2=propertyValue2]...]

.. note::

    The pair or list of <host>:<psql-port> pairs must always end with trailing
    slash.

The ``jdbc:`` prefix is optional. For example. To connect to a single server
the following two formats are both allowed::

    crate://localhost:5432/

::

    jdbc:crate://localhost:5432/


To support connection fail-over, multiple pairs of <host>:<psql-port>, delimited
by a comma, can be specified::

    crate://host1.example.com:5432,host2.example.com:5432/

The driver will try to connect to the hosts in the order defined by the comma
separated list until the first successfull connection is established.

.. NOTE::

    If you have multiple client apps or threads connecting to the CrateDB
    cluster, it is adviseable to shuffle the order of those pairs in each
    instance, as this will provide a cheap form of load balancing. The goal
    being that each client or thread is connecting to a different node by
    default, and then moving on to the next node if that node is not available,
    and so on. In aggregate, this should spread load fairly evenly.

    To achieve that just set the parameter ``loadBalanceHosts`` to ``true``.
    E.g.::

        crate://host1.example.com:5432,host2.example.com:5432/?loadBalanceHosts=true

To specify a schema, the ``setSchema`` method must be explicitly called on
the connection. If no schema is provided, the ``doc`` default schema will be
used:

.. code-block:: java

    Connection conn = DriverManager.getConnection("crate://localhost:5432/");
    conn.setSchema("foo");

.. note::

    Default schema support requires at least CrateDB 0.48.1. If the CrateDB
    server that is used has a version that is lower than 0.48.1 the specified
    schema will be ignored and the default ``doc`` schema will be used instead.


.. _jdbc_connection_properties:

CrateDB JDBC Parameters
=======================

Parameters can be specified when connecting to CrateDB using the JDBC driver.
Here's an example that illustrates the use of parameters to establish an SSL
connection with the database superuser ``crate``.

.. code-block:: java

    Properties properties = new Properties();
    properties.put("user", "crate");
    properties.put("ssl", "true");
    Connection conn = DriverManager.getConnection("crate://localhost:5432/", properties);

In addition, connection parameters can be passed via the JDBC URL:

.. code-block:: java

    Connection conn = DriverManager.getConnection("crate://localhost:5432/?property1=value1&property2=value2");

CrateDB JDBC driver supports all of `the PostgreSQL JDBC driver parameters`_,
though not all of them will make sense for CrateDB. We have listed the most
important ones here.

:strict: ``<Boolean>`` (default ``false``)

    By default the CrateDB JDBC driver ignores the calls of unsupported
    operations, which makes it compatible with most 3rd party applications
    that require transactional features.

    If this property is set to ``true`` it will behave strictly according to
    CrateDBs capabilities and the JDBC specification.
    In case an unsupported operation is called, the corresponding exception
    will be raised.

    Unsupported operations include setting auto-commit or savepoints. The
    strict drivers reports that the database doesn't support transactions, the
    only supported transaction isolation level is ``TRANSACTION_NONE``.
    Read-only connections aren't supported either.

:user: ``<String>``

    The database user on whose behalf the connection is being made.

:password: ``<String>``

    The database user's password.

:ssl: ``true``

    Connect using SSL. The driver must have been compiled with SSL support.

    Due to legacy implementations of the PostgreSQL JDBC driver, you must remove
    this parameter entirely if you wish to not use SSL. Setting it to ``false``
    will result in undefined behaviour.

:loglevel: ``<Integer>``

    Set the amount of logging information printed to the ``DriverManager``'s
    current value for ``LogStream`` or ``LogWriter``. It currently supports
    values of ``org.postgresql.Driver.DEBUG`` (2) and
    ``org.postgresql.Driver.INFO`` (1).

    ``INFO`` will log very little information while ``DEBUG`` will produce
    significant detail. This property is only really useful if you are a
    developer or are having problems with the driver.

:prepareThreshold: ``<Integer>``

    Determine the number of ``PreparedStatement`` executions required before
    switching over to use server side prepared statements.

    The default is five, meaning start using server side prepared statements on
    the fifth execution of the same ``PreparedStatement`` object.

    More information on server side prepared statements is available in the
    PostgreSQL documentation on `Server Prepared Statements`_.

:loginTimeout: ``<Integer>``

    Specify how long to wait for establishment of a database connection. The
    timeout is specified in seconds.

:connectTimeout: ``<Integer>``

    The timeout value used for socket connect operations.

    If connecting to the server takes longer than this value, the connection is
    broken.

    The timeout is specified in seconds and a value of zero means that it is
    disabled. The default value is ``0`` (unlimited) up to 9.4.1208, and ``10``
    seconds since 9.4.1209

    FIXME: above para needs updating for CrateDB

:socketTimeout: ``<Integer>``

    The timeout value used for socket connect operations.

    If connecting to the server takes longer than this value, the connection is
    broken.

    The timeout is specified in seconds and a value of zero means that it is
    disabled. The default value is ``0`` (unlimited) up to 9.4.1208, and ``10``
    seconds since 9.4.1209

    FIXME: above para needs updating for CrateDB

:tcpKeepAlive: ``<Boolean>`` (default ``false``)

    Enable or disable TCP keep-alive probe.

:readOnly: ``<Boolean>`` (default ``false``)

    Put the connection in read-only mode.

:currentSchema: ``<String>``

    Specify the schema to be set in the search-path.

    This schema will be used to resolve unqualified object names used in
    statements over this connection.

:loadBalanceHosts: ``<Boolean>`` (default ``false``)

     In default mode (i.e. disabled) hosts are connected in the given order. If
     enabled, hosts are chosen randomly from the set of suitable candidates.

.. _Server Prepared Statements: https://jdbc.postgresql.org/documentation/94/server-prepare.html
.. _the PostgreSQL JDBC driver parameters: https://jdbc.postgresql.org/documentation/94/connect.html
.. _User Management: https://crate.io/docs/crate/reference/en/latest/sql/administration/user_management.html
