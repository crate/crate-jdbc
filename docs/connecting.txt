.. _jdbc_connecting_to_crate:

=====================
Connecting to CrateDB
=====================

CrateDB >= 2.1 requires to connect using a valid database user. If you're using
the standard edition of CrateDB, you can only use the predefined ``crate``
user. If you're using the enterprise edition, see `User Management`_ on
information how to add and remove users.

In JDBC, the database user can be passed via the ``user`` key JDBC URL or
:ref:`jdbc_connection_properties`.

.. rubric:: Table of Contents

.. contents::
   :local:

JDBC Driver Class
=================

A connection can be established using ``DriverManager.getConnection()``
method, e.g.::

    Connection conn = DriverManager.getConnection("crate://localhost:5432/");

The driver class is ``io.crate.client.jdbc.CrateDriver``.

JDBC URL Format
===============

With JDBC, a database is represented by a URL (Uniform Resource Locator).
With CrateDB, this takes the following form::

    [jdbc:]crate://<host>:<psql-port>[,<host>:<psql-port> , ...]/
        [?propertyName1=propertyValue1[&propertyName2=propertyValue2]...]

.. note::

    The pair or list of <host>:<psql-port> pairs must always end with trailing
    slash.

The ``jdbc:`` prefix is optional. For example. To connect to a single server
the following two formats are both allowed::

    crate://localhost:5432/

::

    jdbc:crate://localhost:5432/


To support connection fail-over, multiple pairs of <host>:<psql-port>, delimited
by a comma, can be specified::

    crate://host1.example.com:5432,host2.example.com:5432/

The driver will try to connect to the hosts in the order defined by the comma
separated list until the first successfull connection is established.

.. NOTE::

    If you have multiple client apps or threads connecting to the CrateDB
    cluster, it is adviseable to shuffle the order of those pairs in each
    instance, as this will provide a cheap form of load balancing. The goal
    being that each client or thread is connecting to a different node by
    default, and then moving on to the next node if that node is not available,
    and so on. In aggregate, this should spread load fairly evenly.

    To achieve that just set the parameter ``loadBalanceHosts`` to ``true``.
    E.g.::

        crate://host1.example.com:5432,host2.example.com:5432/?loadBalanceHosts=true

To specify a schema, the ``setSchema`` method must be explicitly called on
the connection. If no schema is provided, the ``doc`` default schema will be
used:

.. code-block:: java

    Connection conn = DriverManager.getConnection("crate://localhost:5432/");
    conn.setSchema("foo");

.. note::

    Default schema support requires at least CrateDB 0.48.1. If the CrateDB
    server that is used has a version that is lower than 0.48.1 the specified
    schema will be ignored and the default ``doc`` schema will be used instead.


.. _jdbc_connection_properties:

CrateDB JDBC Properties
=======================

Properties can be specified when connecting to CrateDB using the JDBC driver.
Here's an example that illustrates the use of Properties to establish an SSL
connection with the database superuser ``crate``.

.. code-block:: java

    Properties properties = new Properties();
    properties.put("user", "crate");
    properties.put("ssl", "true");
    Connection conn = DriverManager.getConnection("crate://localhost:5432/", properties);

In addition connection properties can be passed via the JDBC URL:

.. code-block:: java

    Connection conn = DriverManager.getConnection("crate://localhost:5432/?property1=value1&property2=value2");

CrateDB JDBC driver supports following properties:

:strict:
    **Default**: ``false``.

    By default the CrateDB JDBC driver ignores the calls of unsupported
    operations, which makes it compatible with most 3rd party applications
    that require transactional features.

    If this property is set to ``true`` it will behave strictly according to
    CrateDBs capabilities and the JDBC specification.
    In case an unsupported operation is called, the corresponding exception
    will be raised.

    Unsupported operations include setting auto-commit or savepoints. The
    strict drivers reports that the database doesn't support transactions, the
    only supported transaction isolation level is ``TRANSACTION_NONE``.
    Read-only connections aren't supported either.

:user:
  **Default**: the user logged into the OS
  Specifies the CrateDB user to identify against CrateDB. You may want to set
  this to ``crate``, which is the default user if none have been created yet.

:password:
  The password to authenticate against the CrateDB cluster.

:ssl:
  **Default**: ``false``
  Enables an SSL (secured) connection to the CrateDB cluster.

.. _User Management: https://crate.io/docs/crate/reference/en/latest/sql/administration/user_management.html
