.. _data-types:

==========
Data Types
==========

.. rubric:: Table of Contents

.. contents::
   :local:

Type Mapping
============

JDBC maps SQL types to `Plain Old Java Objects`_ (POJOs).

While this mapping is straightforward for most CrateDB types, for some it is
not.

The following table shows how the CrateDB types are mapped to `JDBC types`_ and
what method can be used to fetch them from a `ResultSet`_ instance:

.. csv-table::
   :header: "CrateDB Type", "PostgreSQL Type", "JDBC Type", "ResultSet Method"

   "`boolean`_", "bool", "BOOLEAN", "``getBoolean``"
   "`byte`_", "", "TINYINT", "``getByte``"
   "`short`_", "int2", "SMALLINT", "``getShort``"
   "`integer`_", "int4", "INTEGER", "``getInteger``"
   "`long`_", "int8", "BIGINT", "``getLong``"
   "`float`_", "float4", "REAL", "``getFloat``"
   "`double`_", "float8", "DOUBLE", "``getDouble``"
   "`string`_", "varchar", "VARCHAR", "``getString``"
   "`ip`_", "varchar", "VARCHAR", "``getString``"
   "`timestamp`_", "timestamp", "TIMESTAMP", "``getDate``, ``getTime``, ``getTimestamp``"
   "`geo_point`_", "array", "ARRAY", "``getArray``"
   "`geo_shape`_", "json", "JAVA_OBJECT", "``getObject``"
   "`object`_", "json", "JAVA_OBJECT", "``getObject``"
   "`array`_", "array", "ARRAY", "``getArray``"

Array Types
-----------

Array types map to `java.sql.Array`_ instances.

Use the ``.getArray()`` to get the underlying array (it is usually safe to
cast it to ``Object[]``) if you prefer. Otherwise, to have JDBC handle type
mapping, you can use ``.getResultSet()`` and use the related
``ResultSetMetaData`` to get the array values converted to Java POJOs.

The ``ResultSet`` will have one column with the inner array type and the name
of the array field (``Array.getBaseType()``) and as many rows as there are
elements in the array.

Here's one example:

FIXME: can an engineer please add explanatory comments to this block of code.
please explain what is being done here. please also format the code in the most
idiomatic yet reasonable way (I have given this a go myself) - please also add
empty lines where it makes most sense

.. code-block:: java

    Statement statement = connection.createStatement();
    ResultSet resultSet = statement.executeQuery(
        "SELECT array_field FROM my_table"
    );
    resultSet.first();
    Array arrayFieldArray = resultSet.getArray("array_field");
    Object[] arrayFieldValue = arrayFieldValue.getArray();
    ResultSet arrayFieldResultSet = arrayFieldArray.getResultSet();
    arrayFieldResultSet.first();
    String firstValue = arrayFieldResultSet.getString("array_field");

When inserting arrays using a prepared statement, you must convert your array
to a `java.sql.Array`_ by the use of ``createArrayOf()``. This function takes
as its first argument, a CrateDB type as described above and as its second the
array you want to convert.

You can then use ``setArray()`` to set this converted array.

FIXME: can an engineer please add explanatory comments to this block of code.
please explain what is being done here. please also format the code in the most
idiomatic yet reasonable way (I have given this a go myself)

For example:

.. code-block:: java

    PreparedStatement preparedStatement = connection.prepareStatement(
        "INSERT into my_table (string_array) VALUES (?)"
    );
    preparedStatement.setArray(1, connection.createArrayOf(
        "string", new String[]{"a", "b"}
    ));
    preparedStatement.execute();

Object Types
------------

Object columns map to a `java.util.Map<String, Object>`_ object.

You can fetch them using ``ResultSet.getObject()`` and cast the result to
``Map<String, Object>``. This ``Map`` will contain all nested columns defined in
the object.

.. CAUTION::

   Objects can be ``null``.

FIXIME: is the above right? which object? the resulting java object?

FIXME: can an engineer please add explanatory comments to this block of code.
please explain what is being done here. please also format the code in the most
idiomatic yet reasonable way (I have given this a go myself)

.. code-block:: java

    Statement statement = connection.createStatement();
    ResultSet resultSet = statement.executeQuery(
        "SELECT object_field FROM my_table"
    );
    resultSet.first();
    Map<String, Object> objValue = (Map<String, Object>)resultSet.getObject("object_field");
    Object nestedValue = objValue.get("nested_field");

.. _array: https://crate.io/docs/crate/reference/en/latest/general/ddl/data-types.html#array
.. _boolean: https://crate.io/docs/crate/reference/en/latest/general/ddl/data-types.html#boolean
.. _byte: https://crate.io/docs/crate/reference/en/latest/general/ddl/data-types.html#numeric-types
.. _double: https://crate.io/docs/crate/reference/en/latest/general/ddl/data-types.html#numeric-types
.. _float: https://crate.io/docs/crate/reference/en/latest/general/ddl/data-types.html#numeric-types
.. _geo_point: https://crate.io/docs/crate/reference/en/latest/general/ddl/data-types.html#geo-point
.. _geo_shape: https://crate.io/docs/crate/reference/en/latest/general/ddl/data-types.html#geo-shape
.. _integer: https://crate.io/docs/crate/reference/en/latest/general/ddl/data-types.html#numeric-types
.. _ip: https://crate.io/docs/crate/reference/en/latest/general/ddl/data-types.html#ip
.. _java.sql.Array: https://docs.oracle.com/javase/8/docs/api/java/sql/Array.html
.. _java.util.Map<String, Object>: https://docs.oracle.com/javase/8/docs/api/java/util/Map.html
.. _JDBC types: https://docs.oracle.com/javase/8/docs/api/java/sql/Types.html
.. _long: https://crate.io/docs/crate/reference/en/latest/general/ddl/data-types.html#numeric-types
.. _object: https://crate.io/docs/crate/reference/en/latest/general/ddl/data-types.html#object
.. _Plain Old Java Objects: https://en.wikipedia.org/wiki/Plain_old_Java_object
.. _ResultSet: https://docs.oracle.com/javase/8/docs/api/java/sql/ResultSet.html
.. _short: https://crate.io/docs/crate/reference/en/latest/general/ddl/data-types.html#numeric-types
.. _string: https://crate.io/docs/crate/reference/en/latest/general/ddl/data-types.html#string
.. _timestamp: https://crate.io/docs/crate/reference/en/latest/general/ddl/data-types.html#timestamp
