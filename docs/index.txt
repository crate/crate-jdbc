=================
Crate JDBC Driver
=================

JDBC is a core API of Java 1.1 and later. It provides a standard set of
interfaces to SQL-compliant databases.

Crate provides a `type 4 JDBC driver`_. The driver is written in pure Java, and
communicates with the database using the `PostgreSQL Wire Protocol`_.

Because of this, all versions of the JDBC driver >= ``2.0`` require Crate ``0.57.0``
or newer. Previous versions of the JDBC driver (``1.x``) are only compatible with
older versions of Crate.

See compatibility table in the `README`_ of the Github project for a full list
of compatible client/server versions.

Download and Setup
==================

Version 2.x
-----------

Version 2 of the JDBC driver is currently only available on `Jitpack`_.

Using Gradle
.............

.. code-block:: groovy

    repositories {
        ...
        maven { url "https://jitpack.io" }
    }

    dependencies {
        ...
        compile 'com.github.crate:crate-jdbc:2.x'
    }

Using Maven
............

.. code-block:: xml

    ...
    <repositories>
        ...
        <repository>
            <id>jitpack.io</id>
            <name>jitpack</name>
            <url>https://jitpack.io</url>
        </repository>
    </repositories>
    ...
    <dependencies>
        ...
        <dependency>
            <groupId>com.github.crate</groupId>
            <artifactId>crate-jdbc</artifactId>
            <version>2.x</version>
        </dependency>
    </dependencies>
    ...

For unreleased/development builds you can specify a commit hash instead of the
version (``2.x``).

For usage instructions of ``1.x`` versions of the JDBC driver please refer to
previous versions of the documentation!


JDBC Driver Class
=================

A connection can be established using ``DriverManager.getConnection()``
method, e.g.::

    Connection conn = DriverManager.getConnection("crate://localhost:5432/");

JDBC URL Format
===============

With JDBC, a database is represented by a URL (Uniform Resource Locator).
With Crate, this takes the following form::

    [jdbc:]crate://<host>:<psql-port>[,<host>:<psql-port> , ...]/
        [?propertyName1=propertyValue1[&propertyName2=propertyValue2]...]

.. note::

    The pair or list of <host>:<port> pairs must always end with trailing
    slash.

The ``jdbc:`` prefix is optional. For example. To connect to a single server
the following two formats are both allowed::

    crate://localhost:5432/

::

    jdbc:crate://localhost:5432/


In order to connect to multiple servers multiple ``<host>:<psql-port>``
pairs can be specified by delimit them using a comma::

    crate://host1.example.com:5432,host2.example.com:5432/


To specify a schema, the ``setSchema`` method must be explicitly called on
the connection. If no schema is provided, the ``doc`` default schema will be
used::

    Connection conn = DriverManager.getConnection("crate://localhost:5432/");
    conn.setSchema("foo");


.. note::

    Default schema support requires at least Crate 0.48.1. If the Crate server
    that is used has a version that is lower than 0.48.1 the specified schema
    will be ignored and the default ``doc`` schema will be used instead.

Crate JDBC properties
=====================

Properties can be specified when connecting to Crate using the JDBC driver::

    Properties properties = new Properties();
    properties.put(<key>, <value>);
    Connection conn = DriverManager.getConnection("crate://localhost:5432/", properties);

In addition connection properties can be passed via the JDBC URL::

    Connection conn = DriverManager.getConnection("crate://localhost:5432/?property1=value1&property2=value2");

Crate JDBC driver supports following properties:

:strict:
    **Default**: ``false``.

    If you set this property to ``true`` the driver will be compliant with the JDBC
    specification. It will then raise an unsupported operation exception if you
    call an operation which is not supported, like auto-commit or setting a
    savepoint.  The default is ``false``, so the Crate JDBC driver ignores the use
    of unspported operations, which makes it compatible with most 3rd party
    applications that require transactional features.


Compatibility
=============

JDBC
----

This JDBC driver complies to the `JDBC 4.1`_ standard as good as possible and reasonable for
a Crate driver. The following mandatory features are not supported:

* ``java.sql.ParameterMetaData`` as returned by e.g. ``java.sql.PreparedStatement``
* ``DataSource`` is not implemented
* ``CallableStatement`` is not implemented as CRATE has no stored procedures to call

For further details about compatibility with all possible JDBC features,
see the ``ResultSet``, ``ResultSetMetaData`` and ``DatabaseMetaData`` implementations.

Though only an optional feature, it is still worth mentioning:

* the ``ResultSet`` implementation is read only (``TYPE_FORWARD_ONLY``, ``CONCUR_READ_ONLY``),
  so changes to a ``ResultSet`` are not supported. Though DDL and DML statements are supported
  using the ``Statement`` and ``PreparedStatement`` interfaces.

Crate
-----

This JDBC driver can only be used with *Crate version 0.38.0* and higher.

Besides using the most recent version, it is recommended to use the JDBC driver version
whose crate-client dependency matches the Crate server.


Types
=====

JDBC maps SQL types to POJOs. While this mapping is straightforward
for some crate types, for some it is not. This table shows how the crate types
are mapped by JDBC and how they should be fetched from a ``ResultSet`` instance:

.. csv-table:: Frozen Delights!
   :header: "Crate type", "JDBC type", "ResultSet method used to get a value"

   "boolean", "BOOLEAN", "``getBoolean``"
   "byte", "TINYINT", "``getByte``"
   "short", "SMALLINT", "``getShort``"
   "integer", "INTEGER", "``getInteger``"
   "long", "BIGINT", "``getLong``"
   "float", "REAL", "``getFloat``"
   "double", "DOUBLE", "``getDouble``"
   "string", "VARCHAR", "``getString``"
   "timestamp", "TIMESTAMP", "``getDate``, ``getTime``, ``getTimestamp``"
   "ip", "VARCHAR", "``getString``"
   "array", "ARRAY", "``getArray``"
   "object", "JAVA_OBJECT", "``getObject``"

Array Types
-----------

Array types map to ``java.sql.Array`` instances. Use the ``.getArray()`` to get
the underlying java array (it is usually safe to cast it to ``Object[]``) if you prefer.
Otherwise, to have JDBC handle the type mapping stuff for you, you can use ``.getResultSet()``
and use the related ``ResultSetMetaData`` or another way to get the array values
converted to Java POJOs. The ``ResultSet`` will have one column with the inner array type
and the name of the array field (``Array.getBaseType()``) and as much rows as
there are elements in the array.

.. code-block:: java

    Statement statement = connection.createStatement();
    ResultSet resultSet = statement.executeQuery("select array_field from my_table");
    resultSet.first();
    Array arrayFieldArray = resultSet.getArray("array_field");
    Object[] arrayFieldValue = arrayFieldValue.getArray();

    ResultSet arrayFieldResultSet = arrayFieldArray.getResultSet();
    arrayFieldResultSet.first();
    String firstValue = arrayFieldResultSet.getString("array_field");


Object Types
------------

Object columns map to a ``java.util.Map<String, Object>``. You can fetch them
using ``ResultSet.getObject()`` and cast the result to ``Map<String, Object>``.
Be aware that it can be ``null``. This map will contain all the nested columns
defined in that object:

.. code-block:: java

    Statement statement = connection.createStatement();
    ResultSet resultSet = statement.executeQuery("select object_field from my_table");
    resultSet.first();
    Map<String, Object> objValue = (Map<String, Object>)resultSet.getObject("object_field");
    Object nestedValue = objValue.get("nested_field");


.. _`Bintray`: https://bintray.com/crate/crate/
.. _`JCenter`: https://bintray.com/bintray/jcenter
.. _`Squirrel`: http://squirrel-sql.sourceforge.net/
.. _`JDBC 4.1`: http://download.oracle.com/otn-pub/jcp/jdbc-4_1-mrel-spec/jdbc4.1-fr-spec.pdf
.. _`type 4 JDBC driver`: https://en.wikipedia.org/wiki/JDBC_driver#Type_4_driver_.E2.80.93_Database-Protocol_driver_.28Pure_Java_driver.29
.. _`PostgreSQL Wire Protocol`: https://www.postgresql.org/docs/current/static/protocol.html
.. _`README`: https://github.com/crate/crate-jdbc/blob/master/README.rst#compatibility
.. _`Jitpack`: https://jitpack.io/#crate/crate-jdbc/2.0
